package de.telran.abracadabra.games.myPenTest;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;

public class SimpleGame1 extends JPanel implements ActionListener, KeyListener {
    private int playerX = 175;
    private int playerY = 480;
    private int playerSpeed = 15;
    private ArrayList<Integer> enemyX = new ArrayList<>();
    private ArrayList<Integer> enemyY = new ArrayList<>();
    private int enemySpeed = 20;
    private Timer timer;
    private boolean gameOver = false;
    private int score = 0;

    public SimpleGame1() {
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        timer = new Timer(100, this);
        timer.start();
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Simple Game1");
        SimpleGame1 game1 = new SimpleGame1();
        frame.add(game1);
        frame.setSize(400,600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }


    public void paintComponent(Graphics g){
        super.paintComponent(g);
        g.setColor(Color.BLACK);
        g.fillRect(0,0,400,600);
        g.setColor(Color.WHITE);
        g.fillRect(playerX,playerY,50,50);

        for (int i = 0; i < enemyX.size(); i++){
            g.setColor(Color.RED);
            g.fillOval(enemyX.get(i),enemyY.get(i),20,20);
        }

        g.setColor(Color.WHITE);
            g.setFont(new Font("Arial",Font.PLAIN,20));
            g.drawString("Rachunok: " + score,10,30);

            if (gameOver) {
                g.setFont(new Font("Arial", Font.PLAIN, 40));
                g.drawString("Truba",120,300);
                timer.stop();
            }
    }



    @Override
    public void actionPerformed(ActionEvent e) {
        if (!gameOver) {
            for (int i = 0; i < enemyX.size(); i++){
                enemyY.set(i,enemyY.get(i) + enemySpeed);

                if (enemyY.get(i) >=600) {
                    enemyX.remove(i);
                    enemyY.remove(i);
                    score++;
                }
            }
            repaint();

            if (enemyX.isEmpty()) {
                spawnEnemy();
            }
            checkCollision();
        }
    }

    public void spawnEnemy() {
        Random random = new Random();
        int numEnemis = random.nextInt(5) +1;

        for (int i = 0; i < numEnemis; i++) {
            int x = random.nextInt(350);
            int y = 0;
            enemyX.add(x);
            enemyY.add(y);
        }
    }
    public void checkCollision() {
        Rectangle playerBounds = new Rectangle(playerX, playerY, 50, 50);
        for (int i = 0; i < enemyX.size(); i++) {
            Rectangle enemyBounds = new Rectangle(enemyX.get(i),
                    enemyY.get(i),20,20);
            if (playerBounds.intersects(enemyBounds)) {
                gameOver = true;  // Если произошло столкновение, игра заканчивается
                break;
            }
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if (!gameOver) {
            if (key == KeyEvent.VK_LEFT && playerX > 0) {
                playerX -= playerSpeed;
            }
            if (key == KeyEvent.VK_RIGHT && playerX < 350) {
                playerX += playerSpeed;
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {

    }
}

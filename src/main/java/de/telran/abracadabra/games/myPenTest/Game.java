package de.telran.abracadabra.games.myPenTest;


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

public class Game extends JPanel implements ActionListener {
    private Player player; // Игрок
    private List<Enemy> enemies; // Список врагов
    private Timer timer; // Таймер для обновления экрана
    boolean gameOver = false; // Флаг завершения игры
    private int score = 0; // Счет игры
    private SoundPlayer backgroundMusic; // Фоновая музыка
    private SoundPlayer moveSound; // Звук при движении
    private SoundPlayer gameOverSound; // Звук при проигрыше

    public Game() {
        // Инициализация игрока и врагов
        player = new Player(175, 480, 15); // Игрок в начальном положении
        enemies = new ArrayList<>();
        timer = new Timer(100, this); // Таймер, срабатывающий каждые 100 мс
        timer.start(); // Запускаем таймер

        backgroundMusic = new SoundPlayer("src/main/java/de/telran/abracadabra/games/myPenTest/resourse/fon.wav"); // Фоновая музыка
        moveSound = new SoundPlayer("src/main/java/de/telran/abracadabra/games/myPenTest/resourse/left.wav"); // Звук движения
        gameOverSound = new SoundPlayer("src/main/java/de/telran/abracadabra/games/myPenTest/resourse/end.wav"); // Звук проигрыша

        backgroundMusic.loop(); // Включаем фоновую музык

        setFocusable(true); // Делаем панель фокусируемой
        //addKeyListener(new GameKeyListener(player, this)); // Добавляем слушателя клавиатуры
        addKeyListener(new GameKeyListener(player, this, moveSound)); // Передаем звук в контроллер клавиш


    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        // Рисуем фон
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, 400, 600);

        // Рисуем игрока
        player.draw(g);

        // Рисуем врагов
        for (Enemy enemy : enemies) {
            enemy.draw(g);
        }

        // Выводим счет
        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.PLAIN, 20));
        g.drawString("Счет: " + score, 10, 30);

        if (gameOver) {
            g.setFont(new Font("Arial", Font.PLAIN, 40));
            g.drawString("Конец игры", 120, 300);
            timer.stop(); // Останавливаем таймер, если игра закончилась
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!gameOver) {
            // Обновляем позицию врагов
            Iterator<Enemy> iterator = enemies.iterator();
            while (iterator.hasNext()) {
                Enemy enemy = iterator.next();
                enemy.move();
                if (enemy.getY() >= 600) { // Удаляем врагов, которые вышли за экран
                    iterator.remove();
                    score++;
                }
            }

            repaint(); // Перерисовываем экран
            // Если врагов не осталось, создаем новых
            if (enemies.isEmpty()) {
                spawnEnemy();
            }

            // Проверяем столкновения игрока с врагами
            checkCollision();

        } else {
            gameOverSound.play();  // Проигрываем звук при окончании игры
        }
    }

    public void spawnEnemy() {
        Random rand = new Random();
        int numEnemies = rand.nextInt(5) + 1; // От 1 до 5 врагов
        for (int i = 0; i < numEnemies; i++) {
            int x = rand.nextInt(350); // Случайная X-координата врага
            enemies.add(new Enemy(x, 0, 10)); // Добавляем нового врага
        }
    }

    public void checkCollision() {
        Rectangle playerBounds = player.getBounds(); // Границы игрока
        for (Enemy enemy : enemies) {
            if (playerBounds.intersects(enemy.getBounds())) {
                gameOver = true; // Если игрок столкнулся с врагом
                backgroundMusic.stop(); // Останавливаем фоновую музыку
                gameOverSound.play(); // Проигрываем звук при проигрыше
                break;
            }
        }
    }
}

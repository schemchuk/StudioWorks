package de.telran.abracadabra.games.myPenTest;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

public class Game extends JPanel implements ActionListener {
    private Player player; // Объект игрока
    private List<Enemy> enemies; // Список врагов
    private List<Bullet> bullets; // Список снарядов
    private Timer timer; // Таймер для обновления экрана
    boolean gameOver = false; // Флаг завершения игры
    private int score = 0; // Счет игры
    private SoundPlayer backgroundMusic; // Фоновая музыка
    private SoundPlayer moveSound; // Звук при движении
    private SoundPlayer gameOverSound; // Звук при проигрыше

    public Game() {
        player = new Player(175, 480, 15);
        enemies = new ArrayList<>();
        bullets = new ArrayList<>(); // Инициализация списка снарядов
        timer = new Timer(100, this);
        timer.start();

        backgroundMusic = new SoundPlayer("src/main/java/de/telran/abracadabra/games/myPenTest/resourse/fon.wav");
        moveSound = new SoundPlayer("src/main/java/de/telran/abracadabra/games/myPenTest/resourse/left.wav");
        gameOverSound = new SoundPlayer("src/main/java/de/telran/abracadabra/games/myPenTest/resourse/end.wav");

        backgroundMusic.loop();

        setFocusable(true);
        addKeyListener(new GameKeyListener(player, this, moveSound));
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        g.setColor(Color.BLACK);
        g.fillRect(0, 0, 400, 600);

        player.draw(g);

        for (Enemy enemy : enemies) {
            enemy.draw(g);
        }

        for (Bullet bullet : bullets) { // Рисуем снаряды
            bullet.draw(g);
        }

        g.setColor(Color.WHITE);
        g.setFont(new Font("Arial", Font.PLAIN, 20));
        g.drawString("Счет: " + score, 10, 30);

        if (gameOver) {
            g.setFont(new Font("Arial", Font.PLAIN, 40));
            g.drawString("Конец игры", 120, 300);
            timer.stop();
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!gameOver) {
            Iterator<Enemy> enemyIterator = enemies.iterator();
            while (enemyIterator.hasNext()) {
                Enemy enemy = enemyIterator.next();
                enemy.move();
                if (enemy.getY() >= 600) {
                    enemyIterator.remove();
                    score++;
                }
            }

            Iterator<Bullet> bulletIterator = bullets.iterator(); // Итератор для списка снарядов
            while (bulletIterator.hasNext()) {
                Bullet bullet = bulletIterator.next();
                bullet.move(); // Перемещаем снаряд
                if (bullet.getY() < 0) { // Если снаряд вышел за верхнюю границу экрана
                    bulletIterator.remove(); // Удаляем снаряд из списка
                }
            }

            checkBulletCollisions(); // Проверка столкновений снарядов с врагами

            repaint();
            if (enemies.isEmpty()) {
                spawnEnemy();
            }

            checkCollision();
        } else {
            gameOverSound.play();
        }
    }

    public void spawnEnemy() {
        Random rand = new Random();
        int numEnemies = rand.nextInt(5) + 1;
        for (int i = 0; i < numEnemies; i++) {
            int x = rand.nextInt(350);
            enemies.add(new Enemy(x, 0, 10));
        }
    }

    public void checkCollision() {
        Rectangle playerBounds = player.getBounds();
        for (Enemy enemy : enemies) {
            if (playerBounds.intersects(enemy.getBounds())) {
                gameOver = true;
                backgroundMusic.stop();
                gameOverSound.play();
                break;
            }
        }
    }

    public void checkBulletCollisions() { // Метод для проверки столкновений снарядов с врагами
        Iterator<Bullet> bulletIterator = bullets.iterator();
        while (bulletIterator.hasNext()) {
            Bullet bullet = bulletIterator.next();
            Rectangle bulletBounds = bullet.getBounds();
            Iterator<Enemy> enemyIterator = enemies.iterator();
            while (enemyIterator.hasNext()) {
                Enemy enemy = enemyIterator.next();
                if (bulletBounds.intersects(enemy.getBounds())) { // Если снаряд попадает во врага
                    bulletIterator.remove(); // Удаляем снаряд
                    enemyIterator.remove(); // Удаляем врага
                    score++; // Увеличиваем счет
                    break;
                }
            }
        }
    }

    public void playerShoot() { // Метод для стрельбы игрока
        player.shoot(bullets); // Добавляем снаряд в список
    }
}


